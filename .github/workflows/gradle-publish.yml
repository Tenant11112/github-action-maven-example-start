name: Maven CI/CD
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    types: [opened, edited, reopened, synchronize]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 14
      uses: actions/setup-java@v1
      with:
        java-version: 14

    - name: Cache the Maven packages to speed up build
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2      

    - name: Build and test project with Maven
      run: mvn -B package --file pom.xml

    
  publish-job:
      runs-on: ubuntu-latest
      needs: [build_and_test]
      steps:
        - uses: actions/checkout@v2
        - uses: actions/setup-java@v1
          with:
            java-version: 14
        - run: mvn -B package --file pom.xml -DskipTests
        - run: mkdir staging && cp target/*jar-with-dependencies.jar staging
        - uses: actions/upload-artifact@v1
          with:
            name: Package
            path: staging
  
  build-docker-image:
    name: Publish image into jfrog, ec2 deployment and ecr
    runs-on: ubuntu-latest
    needs: [build_and_test]

    steps:
      - uses: actions/checkout@v2
      - name: Login to jfrog artifact
        run:  docker login ${{ secrets.IMAGE_HOST_NAME }} -u ${{ secrets.IMAGE_USER_WRITER }} -p ${{ secrets.IMAGE_PASSWORD_WRITER }}
      - name: Build Container image
        run:  docker build -t artifactory.beta.ibdp.calibo.com/newprojectteam/f/temp:latest .
      - name: Apply push command
        run:  docker push artifactory.beta.ibdp.calibo.com/newprojectteam/f/temp:latest
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: docker pull artifactory.beta.ibdp.calibo.com/newprojectteam/f/temp:latest & docker run -d --name demo_tech_talk  artifactory.beta.ibdp.calibo.com/newprojectteam/f/temp:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPONAME }}
        run: |
          # Build a docker container and push it to ECR
          echo "Pushing image to ECR..."
          docker push artifactory.beta.ibdp.calibo.com/newprojectteam/f/temp:latest

  sonar_gate:
    name: sonar gate
    runs-on: ubuntu-latest
    needs: [build_and_test]
    steps:
      - name: Setup sonarqube
        uses: warchant/setup-sonar-scanner@v3

      - name: 'Checkout repository on branch: master'
        uses: actions/checkout@v2
        with:
          ref: master  #${{ github.REF }}'

      - name: Retrieve entire repository history
        run: |
          git fetch --prune --unshallow
      - name: Run an analysis of the PR
        env:
          # To get access to secrets.SONAR_TOKEN, provide GITHUB_TOKEN
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: sonar-scanner
          -Dsonar.host.url=${{ secrets.SONARQUBE_HOST }}
          -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }}
          -Dsonar.projectKey=abc
          -Dsonar.scm.provider=git
          -Dsonar.java.binaries=/tmp

  deploy_to_kuber_cluster:
    name: deploy to cluster
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: deploy to cluster
        uses: kodermax/kubectl-aws-eks@master
        env:
          #KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_STAGING }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: kartike
          IMAGE_TAG: latest
        with:
           args: set image deployment/$ECR_REPOSITORY $ECR_REPOSITORY=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG




#  push-docker-image-to-ecr:
#    name: pushtoecr
#    runs-on: ubuntu-latest
#    needs: [build-docker-image]
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v2
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Build, tag, and push the image to Amazon ECR
#        id: build-image
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: ${{ secrets.REPONAME }}
#          IMAGE_TAG: 1.0
#        run: |
#          # Build a docker container and push it to ECR
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          echo "Pushing image to ECR..."
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

#  push-docker-image-to-jfrog:
#    name: pushingtojfrog
#    runs-on: ubuntu-latest
#    needs: [build-docker-image]
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v2
#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Login to JFrog
#        uses: docker/login-action@v1
#        with:
#          registry: artifactory.beta.ibdp.calibo.com/newprojectteam/f/
#          username: ${{ secrets.JFROG_USER_WRITER }}
#          password: ${{ secrets.JFROG_PASSWORD_WRITER }}
#      - name: Build and push
#        id: docker_build
#        uses: docker/build-push-action@v2
#        with:
#          push: true
#          tags: ${{ secrets.DOCKER_REPO }}:latest